[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 . Saha Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Overview.html","id":"why-is-independencepvalue-needed","dir":"Articles","previous_headings":"","what":"Why is independencepvalue needed?","title":"Overview","text":"theory, one decide hypotheses test seeing data. However, practice, scientists often want find something seemingly interesting data use test really interesting. generate hypothesis based data set use data set test hypothesis, classical hypothesis testing may lead invalid results. illustrate: consider simulated dataset, variables correlated (shown heatmap absolute entries absolute sample correlation matrix). dataset, first identify groups seemingly uncorrelated variables via thresholding correlation matrix. want test null hypothesis really uncorrelated. classical approach based Wilks’ lambda distribution yielded p-value 0.791, even variables correlated population! shows ignoring fact hypothesis selected data can lead tremendous loss power.  independencepvalue comes play. accounts fact hypothesis generated thresholding correlation matrix data. Applying independencepvalue aforementioned scenario leads p-value 0.014. Unlike classical inference, test correctly identifies group variables correlated. know use independencepvalue, please see Tutorial.","code":""},{"path":"/articles/Overview.html","id":"how-does-independencepvalue-work","dir":"Articles","previous_headings":"","what":"How does independencepvalue work?","title":"Overview","text":"independencepvalue works two stages: First, threshold absolute values observed correlation matrix partition variables groups seemingly uncorrelated variables. Next, take selective inference approach test group variables (obtained previous step) independent remaining variables. , unlike classical approach, ignore hypothesis generated data. account conditioning event grouping variables generated hypothesis recovered. adjust null distribution account selection particular hypothesis tested. restricting attention specifically datasets led hypothesis selected, able account selection effect. details, please see paper, Inferring independent sets Gaussian variables thresholding correlations.","code":""},{"path":"/articles/Tutorial.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Tutorial","text":"Let \\({\\bf X}\\sim N_{n\\times p}(0,{\\bf }_n,{\\boldsymbol\\Sigma})\\), let \\({\\bf x}\\) realization \\({\\bf X}\\). package tests particular block covariance matrix zero , .e. \\[ H_0^{\\mathcal P}:{\\boldsymbol\\Sigma}_{{\\mathcal P},{\\mathcal P}^c}={\\bf 0}~~\\text{versus}~~H_1^{\\mathcal P}:{\\boldsymbol\\Sigma}_{{\\mathcal P},{\\mathcal P}^c}\\neq{\\bf 0}. \\] two main parts package: P-values case pre-specified groups: compute p-value classical context \\({\\mathcal P}\\) assumed pre-specified (.e., selected based data used testing). focus package, users may find useful. , compute p-value \\[ p_{classical} = P \\left( T({\\bf X}) \\text{ extreme } T({\\bf x}) \\text{ } H_0^{\\mathcal P}\\right), \\] \\(T({\\bf X})\\) denotes test statistic corresponding \\({\\bf X}\\). Partitioning variables groups: implement straightforward partitioning strategy based thresholding absolute values entries correlation matrix. P-values case selected groups: heart package. computes p-values case \\(\\hat{\\mathcal P}= \\hat{\\mathcal P}({\\bf x})\\) result implementing partitioning . \\(\\mathbf{x}\\). Since case, group variables data-dependent, write tested hypothesis \\[ H_0^{\\hat{\\mathcal P}}:{\\boldsymbol\\Sigma}_{\\hat{\\mathcal P},\\hat{\\mathcal P}^c}={\\bf 0}~~\\text{versus}~~H_1^{\\hat{\\mathcal P}}:{\\boldsymbol\\Sigma}_{\\hat{\\mathcal P},\\hat{\\mathcal P}^c}\\neq{\\bf 0}. \\] , computing p-value, consider realizations \\({\\bf X}\\) applying thresholding part . recovers observed partitioning data \\({\\bf x}\\), .e. \\[ p_{selective} = P \\left( T({\\bf X}) \\text{ extreme } T({\\bf x}) \\text{ } H_0^\\hat{\\mathcal P}\\bigg| \\text{ Applying . } {\\bf X}\\text{ recovers } \\hat{\\mathcal P}\\right). \\] First, load independencepvalue: Next, demonstrate use package example considered Overview. First, simulate data: Now, use thresholding cutoff \\(c = 0.5\\) sample correlation matrix obtain partitioning variables. plot absolute values sample correlation matrix, adjacency matrix obtained thresholding, graph corresponding adjacency matrix show groups obtained:  Next, test independence group 1 remaining variables. First, use classical approach: demonstrated Overview, classical approach fails reject null hypothesis consequently identify group variables correlated remaining variables. primarily happens classical inference account fact hypothesis selected data. proposed selective inference approach accounts : observe selective approach correctly identifies group variables correlated remaining variables. Overall selective inference independencepvalue higher power classical inference well-calibrated type-error (please refer Inferring independent sets Gaussian variables thresholding correlations). can play pivotal role protecting oversimplification network structures fields genomics, genetics, neuroscience, etc., turn can lead novel discoveries science.","code":"library(independencepvalue) p <- 6 n <- 9 Sigma <- create_example(p, a = 0.6, b = 0.3) set.seed(9768) X <- MASS::mvrnorm(n=n, rep(0, p), Sigma) block_diag_structure <- block_diag(cor(X), c=0.5, fig = TRUE) block_diag_structure #> [1] 1 1 1 2 3 3 classical_p_val(S=cov(X), CP=block_diag_structure, k=1, n=n, mc_iter=1000) #> [1] 0.791 selective_p_val(S=cov(X), CP=block_diag_structure, k=1, n=n, c=0.5, d0=5, mc_iter=1000) #> [1] 0.01411965"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Arkajyoti Saha. Author, maintainer. Daniela Witten. Author. Jacob Bien. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Saha , Witten D, Bien J (2022). independencepvalue: Testing independence groups Gaussian variables. R package version 0.0.2, https://github.com/ArkajyotiSaha/independencepvalue-project/tree/main/independencepvalue.","code":"@Manual{,   title = {independencepvalue: Testing independence between groups of Gaussian variables},   author = {Arkajyoti Saha and Daniela Witten and Jacob Bien},   year = {2022},   note = {R package version 0.0.2},   url = {https://github.com/ArkajyotiSaha/independencepvalue-project/tree/main/independencepvalue}, }"},{"path":[]},{"path":"/index.html","id":"what-does-independencepvalue-do","dir":"","previous_headings":"","what":"What does independencepvalue do?","title":"Testing independence between groups of Gaussian variables","text":"independencepvalue R package tests independence two groups Gaussian variables, groups obtained thresholding correlation matrix. brief overview explaining independencepvalue needed works, see . full explanation, can read paper Inferring independent sets Gaussian variables thresholding correlations.","code":""},{"path":"/index.html","id":"how-do-i-get-independencepvalue","dir":"","previous_headings":"","what":"How do I get independencepvalue?","title":"Testing independence between groups of Gaussian variables","text":"install independencepvalue, run following: (necessary, first install remotes package using install.packages(\"remotes\").)","code":"remotes::install_github(\"ArkajyotiSaha/independencepvalue-project\",                         subdir = \"independencepvalue\")"},{"path":"/index.html","id":"how-do-i-use-independencepvalue","dir":"","previous_headings":"","what":"How do I use independencepvalue?","title":"Testing independence between groups of Gaussian variables","text":"get started independencepvalue, recommend trying tutorial.","code":""},{"path":"/index.html","id":"other-information","dir":"","previous_headings":"","what":"Other information","title":"Testing independence between groups of Gaussian variables","text":"R package created using literate programming litr R package. know independencepvalue generation, please visit package repository.","code":""},{"path":"/reference/MC_function_classical.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for Monte Carlo simulation for classical inference — MC_function_classical","title":"Function for Monte Carlo simulation for classical inference — MC_function_classical","text":"Samples joint distribution canonical correlations two groups independent Gaussian variables size \\(p_1\\) \\(p_2\\) using sample_psi(), computes corresponding test statistic, follows Wilks' lambda distribution.","code":""},{"path":"/reference/MC_function_classical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for Monte Carlo simulation for classical inference — MC_function_classical","text":"","code":"MC_function_classical(p, rp, n)"},{"path":"/reference/MC_function_classical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for Monte Carlo simulation for classical inference — MC_function_classical","text":"p \\(p_1+p_2\\) rp \\(min(p_1, p_2)\\) n sample size","code":""},{"path":"/reference/MC_function_classical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for Monte Carlo simulation for classical inference — MC_function_classical","text":"sample Wilks' lambda distribution.","code":""},{"path":"/reference/MC_function_selective.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for Monte Carlo simulation for selective inference — MC_function_selective","title":"Function for Monte Carlo simulation for selective inference — MC_function_selective","text":"Samples joint distribution canonical correlations two groups independent Gaussian variables size \\(p_1\\) \\(p_2\\) using sample_psi(), computes corresponding test statistic, follows Wilks' lambda distribution. Given matrix L rp columns, vector length equal number rows L, checks sampled vector \\(\\lambda\\) satisfies \\(\\lambda : L\\lambda \\le g\\)","code":""},{"path":"/reference/MC_function_selective.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for Monte Carlo simulation for selective inference — MC_function_selective","text":"","code":"MC_function_selective(p, rp, n, L, g)"},{"path":"/reference/MC_function_selective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for Monte Carlo simulation for selective inference — MC_function_selective","text":"p \\(p_1 + p_2\\) rp \\(min(p_1, p_2)\\) n sample size L matrix rp columns g vector length equal number rows L","code":""},{"path":"/reference/MC_function_selective.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for Monte Carlo simulation for selective inference — MC_function_selective","text":"statistic Test statistic corresponding simulated \\(\\lambda\\). status logical vector indicating simulated \\(\\lambda\\) satisfies \\(L\\lambda \\leq g\\).","code":""},{"path":"/reference/block_diag.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to obtain block diagonal structure through thresholding — block_diag","title":"Function to obtain block diagonal structure through thresholding — block_diag","text":"Given correlation matrix \\(R\\), function discovers block-diagonal structure thresholding absolute values entries correlation matrix \\(c\\). create adjacency matrix elements 1 corresponding member correlation matrix absolute value \\(\\ge c\\). equivalent performing single linkage hierarchical clustering variables, distance matrix given \\(1 - |R|\\) cutting tree height \\(1-c\\).","code":""},{"path":"/reference/block_diag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to obtain block diagonal structure through thresholding — block_diag","text":"","code":"block_diag(R, c, fig = FALSE)"},{"path":"/reference/block_diag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to obtain block diagonal structure through thresholding — block_diag","text":"R \\(p \\times p\\) correlation matrix c threshold fig logical input; TRUE, plots R, adjacency matrix obtained thresholding R, undirected graph corresponding adjacency matrix; default value FALSE","code":""},{"path":"/reference/block_diag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to obtain block diagonal structure through thresholding — block_diag","text":"\\(p\\) length integer vector whose \\(^{th}\\) element denotes group \\(^{th}\\) variable belongs . fig = TRUE, returns plots R, adjacency matrix obtained thresholding R, undirected graph corresponding adjacency matrix.","code":""},{"path":"/reference/block_diag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to obtain block diagonal structure through thresholding — block_diag","text":"","code":"# Simulates a 10 x 5 X from N(0, I) set.seed(1) X <- matrix(rnorm(50), 10, 5) # Compute the correlation matrix of X. corX <- cor(X) # Compute the block diagonal structure at c=0.5 block_diag(R=corX, c=0.5) #> [1] 1 1 1 2 3"},{"path":"/reference/classical_p_val.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to test the independence of two pre-specified groups of variables — classical_p_val","title":"Function to test the independence of two pre-specified groups of variables — classical_p_val","text":"Given covariance matrix \\(S\\) \\(p\\) Gaussian variables, pre-specified group variables \\(P\\), function tests null hypothesis independence groups variables \\(P\\) \\(P^c\\). Makes use test_stat_CCA() sample_psi().","code":""},{"path":"/reference/classical_p_val.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to test the independence of two pre-specified groups of variables — classical_p_val","text":"","code":"classical_p_val(S, CP, k, n, mc_iter = 1000)"},{"path":"/reference/classical_p_val.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to test the independence of two pre-specified groups of variables — classical_p_val","text":"S \\(p \\times p\\) covariance matrix CP vector length \\(p\\) \\(^{th}\\) element denoting group \\(^{th}\\) variable belongs k group tested independence remaining variables, .e. \\(P = [: CP[]==k]\\) n sample size mc_iter number Monte Carlo iterations used approximate p-value; recommend using high value obtain approximation high accuracy; default value 1,000","code":""},{"path":"/reference/classical_p_val.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to test the independence of two pre-specified groups of variables — classical_p_val","text":"p-value test independence.","code":""},{"path":"/reference/classical_p_val.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to test the independence of two pre-specified groups of variables — classical_p_val","text":"","code":"# Simulates a 10 x 3 X_1 from N(0, I) set.seed(1) X_1 <- matrix(rnorm(30), 10, 3)  # Simulates a 10 x 2 X_2 from N(0, I) independently of X_1 set.seed(2) X_2 <- matrix(rnorm(20), 10, 2)  # Compute the covariance matrix of X = (X_1 X_2). covX <- cov(cbind(X_1, X_2)) # tests for a difference in means between X_1 and X_2 classical_p_val(S=covX, CP=rep(1:2, times=c(3, 2)), k=1, n=10, mc_iter=100) #> [1] 0.08"},{"path":"/reference/create_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create a population correlation matrix for the vignette — create_example","title":"Function to create a population correlation matrix for the vignette — create_example","text":"function creates p x p matrix diagonal blocks two p/2 equicorrelation matrix parameter . elements offdiagonal blocks matrix equal b. p even number.","code":""},{"path":"/reference/create_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create a population correlation matrix for the vignette — create_example","text":"","code":"create_example(p, a, b)"},{"path":"/reference/create_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create a population correlation matrix for the vignette — create_example","text":"p total number variables, must even parameter equicorrelation matrix diagonal blocks b parameter -diagonal blocks","code":""},{"path":"/reference/create_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create a population correlation matrix for the vignette — create_example","text":"p x p matrix.","code":""},{"path":"/reference/dCCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to evaluate the joint density of the canonical correlations — dCCA","title":"Function to evaluate the joint density of the canonical correlations — dCCA","text":"function evaluates joint density canonical correlations specific value lambda.","code":""},{"path":"/reference/dCCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to evaluate the joint density of the canonical correlations — dCCA","text":"","code":"dCCA(n, p, rp, a, lambda)"},{"path":"/reference/dCCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to evaluate the joint density of the canonical correlations — dCCA","text":"n sample size p total number variables rp smaller size two groups variables scaling constant lambda rp length vector joint density evaluated \\(1 \\ge lambda[1]\\ge lambda[2] \\ge ... \\ge lambda[rp] \\ge 0\\)","code":""},{"path":"/reference/dCCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to evaluate the joint density of the canonical correlations — dCCA","text":"Scaled joined density canonical correlations, evaluated \\(lambda\\).","code":""},{"path":"/reference/form_L.html","id":null,"dir":"Reference","previous_headings":"","what":"Form L matrix described in Theorem 2 — form_L","title":"Form L matrix described in Theorem 2 — form_L","text":"Form L matrix described Theorem 2","code":""},{"path":"/reference/form_L.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Form L matrix described in Theorem 2 — form_L","text":"","code":"form_L(test_hyp)"},{"path":"/reference/form_L.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Form L matrix described in Theorem 2 — form_L","text":"test_hyp output test_stat_CCA()","code":""},{"path":"/reference/sample_psi.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from the distribution of eigenvalues of W * inv(T) — sample_psi","title":"Sample from the distribution of eigenvalues of W * inv(T) — sample_psi","text":"Samples rp-dimensional joint distribution eigenvalues \\(WT^{-1}\\), \\(W\\) \\(T\\) independent Wisharts dimensions specified Prop 1(ii).  \\(\\Psi_i\\), taking \\(\\sqrt{(\\Psi_i/(1+\\Psi_i))}\\) gives sample joint distribution canonical correlations two groups variables size \\(p_1\\) \\(p_2\\) null.","code":""},{"path":"/reference/sample_psi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from the distribution of eigenvalues of W * inv(T) — sample_psi","text":"","code":"sample_psi(p, rp, n)"},{"path":"/reference/sample_psi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from the distribution of eigenvalues of W * inv(T) — sample_psi","text":"p \\(p_1+p_2\\) rp \\(min(p_1, p_2)\\) n sample size","code":""},{"path":"/reference/sample_psi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from the distribution of eigenvalues of W * inv(T) — sample_psi","text":"vector length rp sampled joint distribution described .","code":""},{"path":"/reference/selective_p_val.html","id":null,"dir":"Reference","previous_headings":"","what":"Test independence of a data-dependent group of variables with the rest — selective_p_val","title":"Test independence of a data-dependent group of variables with the rest — selective_p_val","text":"Given covariance matrix S p Gaussian variables grouping obtained via thresholding absolute correlations 1-c using block_diag(), function tests null hypothesis independence two groups Gaussian variables.","code":""},{"path":"/reference/selective_p_val.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test independence of a data-dependent group of variables with the rest — selective_p_val","text":"","code":"selective_p_val(   S,   CP,   k,   n,   c,   d0 = 5,   tol = 1e-05,   maxeval = 1e+05,   mc_iter = 1000 )"},{"path":"/reference/selective_p_val.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test independence of a data-dependent group of variables with the rest — selective_p_val","text":"S \\(p \\times p\\) covariance matrix CP vector length \\(p\\) \\(^{th}\\) element denoting group \\(^{th}\\) variable belongs k group tested independence remaining variables, .e. \\(P = [: CP[]==k]\\) n sample size c threshold d0 natural number; number canonical correlations greater d0, Monte Carlo simulation used approximate p-value computational convenience; default value 5 tol relative tolerance used approximate p-value using selective_p_val_integrate(); default value 1e-05 maxeval maximum number function evaluations used approximate p-value using selective_p_val_integrate(); recommend using high value obtain approximation high accuracy; default value 10,000 mc_iter number Monte Carlo iterations used approximate p-value; recommend using high value obtain approximation high accuracy; default value 1,000","code":""},{"path":"/reference/selective_p_val.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test independence of a data-dependent group of variables with the rest — selective_p_val","text":"selective p-value test independence.","code":""},{"path":"/reference/selective_p_val.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test independence of a data-dependent group of variables with the rest — selective_p_val","text":"","code":"# Simulates a 10 x 5 X from N(0, I) set.seed(1) X <- matrix(rnorm(50), 10, 5)  # Compute the correlation matrix of X. corX <- cor(X) # Use 'block_diag' to obtain any block diagonal structure block_diag_structure <- block_diag(corX, c= 0.5) # test for independence of the variables in group 1 with the remaining variables selective_p_val(S=cov(X), n=10, CP=block_diag_structure, c=0.5,  k=1, d0=5, tol = 1e-05, maxeval = 10000, mc_iter=100) #> [1] 0.2721862"},{"path":"/reference/selective_p_val_MC.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute selective p-value using Monte Carlo — selective_p_val_MC","title":"Compute selective p-value using Monte Carlo — selective_p_val_MC","text":"Compute selective p-value using Monte Carlo","code":""},{"path":"/reference/selective_p_val_MC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute selective p-value using Monte Carlo — selective_p_val_MC","text":"","code":"selective_p_val_MC(n, L, g, test_hyp, mc_iter)"},{"path":"/reference/selective_p_val_MC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute selective p-value using Monte Carlo — selective_p_val_MC","text":"n sample size L matrix used define conditioning set g vector used define conditioning set test_hyp output test_stat_CCA() mc_iter number Monte Carlo iterations","code":""},{"path":"/reference/selective_p_val_beta.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute selective p-value using numerical integration — selective_p_val_beta","title":"Compute selective p-value using numerical integration — selective_p_val_beta","text":"Compute selective p-value using numerical integration","code":""},{"path":"/reference/selective_p_val_beta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute selective p-value using numerical integration — selective_p_val_beta","text":"","code":"selective_p_val_beta(S, CP, k, n, c, test_hyp)"},{"path":"/reference/selective_p_val_beta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute selective p-value using numerical integration — selective_p_val_beta","text":"S \\(p \\times p\\) covariance matrix CP vector length \\(p\\) \\(^{th}\\) element denoting group \\(^{th}\\) variable belongs k group tested independence remaining variables, .e. \\(P = [: CP[]==k]\\) n sample size c threshold test_hyp output test_stat_CCA()","code":""},{"path":"/reference/selective_p_val_integrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute selective p-value using numerical integration — selective_p_val_integrate","title":"Compute selective p-value using numerical integration — selective_p_val_integrate","text":"Compute selective p-value using numerical integration","code":""},{"path":"/reference/selective_p_val_integrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute selective p-value using numerical integration — selective_p_val_integrate","text":"","code":"selective_p_val_integrate(n, L, g, test_hyp, tol = 1e-05, maxeval = 10000)"},{"path":"/reference/selective_p_val_integrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute selective p-value using numerical integration — selective_p_val_integrate","text":"n sample size L matrix used define conditioning set g vector used define conditioning set test_hyp output test_stat_CCA() tol relative tolerance used approximate p-value using selective_p_val_integrate(); default value 1e-05 maxeval maximum number function evaluations used approximate p-value using selective_p_val_integrate(); recommend using high value obtain approximation high accuracy; default value 10,000","code":""},{"path":"/reference/test_stat_CCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the test statistic as a function of canonical correlations. — test_stat_CCA","title":"Compute the test statistic as a function of canonical correlations. — test_stat_CCA","text":"Given sample covariance matrix \\(S\\) group variables \\(P\\), first computes cross-covariance matrix whitened variables: \\(S_{P, P^c}^W = S_{P, P}^{-0.5} S_{P, P^c} S_{P^c, P^c}^{-0.5}\\). Next, computes SVD \\(S_{P, P^c}^W\\) returns test statistic, \\(S_{P, P}\\), \\(S_{P^c, P^c}\\) canonical vectors \\(S_{P, P^c}\\).","code":""},{"path":"/reference/test_stat_CCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the test statistic as a function of canonical correlations. — test_stat_CCA","text":"","code":"test_stat_CCA(S, CP, k)"},{"path":"/reference/test_stat_CCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the test statistic as a function of canonical correlations. — test_stat_CCA","text":"S \\(p \\times p\\) sample covariance matrix CP vector length \\(p\\) \\(^{th}\\) element denoting group \\(^{th}\\) variable belongs k group tested independence remaining variables, .e. \\(P = : CP[]==k\\)","code":""},{"path":"/reference/test_stat_CCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the test statistic as a function of canonical correlations. — test_stat_CCA","text":"list containing following items: statistic Test statistic corresponding \\(S\\) group variables \\(P\\). S11 \\(S_{P, P}\\) \\(2|P| \\ge p\\), else \\(S_{P^c, P^c}\\). S22 \\(S_{P^c, P^c}\\) \\(2|P| \\ge p\\), else \\(S_{P, P}\\). left_SV Left canonical vectors  \\(S_{P, P^c}\\). right_SV Right canonical vectors \\(S_{P, P^c}\\).","code":""}]
